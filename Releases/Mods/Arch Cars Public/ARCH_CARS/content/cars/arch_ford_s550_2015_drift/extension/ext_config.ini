; config was prepared automatically. source:
; https://github.com/ac-custom-shaders-patch/acc-extension-config/blob/master/config/cars/kunos/ks_ford_mustang_2015.ini
[INCLUDE]
INCLUDE = common/no_popup_lights.ini

[DATA]
FAKE_HIGHBEAMS_INDICATOR_LED_LIGHT = 0

[DEFORMING_HOOD]
NAME = MOTORHOOD
OFFSET_Y_MIDDLE = 0.03
OFFSET_Y_END = -0.02
OFFSET_Z_END = 0.03
BULGING_EXTRA = 0.1
BULGING_EXPONENT = 3
NOISE_Y_AMPLITUDE = 0.8
NOISE_Z_AMPLITUDE = 0.8
NOISE_Y_FREQENCY = 2.0
NOISE_Z_FREQENCY = 3.0
Z_FACTOR = 2.5
Z_BIAS = 0

[EXTRA_FX]
SKIP_GBUFFER = GEO_Int_Glass
MASK_GBUFFER = Geo_Vtr_Lights

[INCLUDE: common/custom_emissive.ini]
DashHighlightColor = 0.2, 0.5, 2

[CustomEmissive]
Meshes = Geo_Freccia_Faro
@ = CustomEmissive_Rect, Channel = 3, Mirror, Start = 0, Size = 1
@ = TurningLightsFront, Channel = 3

[CustomEmissive]
Meshes = Geo_Vtr_Stop3
CompatibleWithPBRGlass = 1
@ = CustomEmissive_Rect, Channel = 2, Start = 0, Size = 1
@ = CustomEmissive_Rect, Channel = 3, Mirror, Start = 0, Size = 1
@ = CustomEmissive_VertexMask, Point2 = "0.52, 0, 0", Point3 = "0.8, 0, 0"
@ = BrakingLights, Channel = 2, HeadlightsIntensity = 0.3, Intensity = 0.1
@ = TurningLightsRearCombined, Channel = 3, Intensity = 0.1

[CustomEmissive]
Meshes = REARLIGHT_0
@ = CustomEmissive_Rect, Channel = 2, Start = 0, Size = 1
@ = CustomEmissive_Rect, Channel = 3, Mirror, Start = 0, Size = 1
@ = CustomEmissive_VertexMask, Point2 = "0.52, 0, 0", Point3 = "0.8, 0, 0"
@ = BrakingLights, Channel = 2, Intensity = 5, HeadlightsIntensity = 0.3
@ = TurningLightsRearCombined, Channel = 3, Intensity = 5

[CustomEmissive]
Meshes = Geo_Rear_Bump_SUB2
@ = CustomEmissive_Rect, Channel = 3, Mirror, Start = 0, Size = 1
@ = CustomEmissive_VertexMask, Point2 = "0.7, 0, 0", Point3 = "0.8, 0, 0"
@ = TurningLightsRearCorner, Channel = 3, NotCastingLight

[CustomEmissive]
Meshes = GEO_Details_int_SUB4
Resolution = 512, 256
@ = CustomEmissive_Circle, Channel = 1, Center = "480, 99", Size = 30, Exponent = 0.5
@ = OpenDoorLight, Channel = 1, Intensity = 10, Position = "0, 1.25, 0.05", Direction = "0, -1, 0"

[CustomEmissiveMulti]
Meshes = GEO_Dials
Resolution = 1024, 512
UseEmissive0AsFallback = 1
Intensity = 5
; Debug = 1 ; uncomment me to see the areas nicely

@ = DashHighlight
@ = MultiItem, Role = DashWarningABS, Center = "547, 110", Size = 40
@ = MultiItem, Role = DashWarningSeatbelt, Center = "513, 109", Size = 30, Circle
@ = MultiItem, Input = HIGHBEAM, Center = "480, 146", Size = "35, 30"
@ = MultiItem, Input = HANDBRAKE, Center = "490, 180", Size = "39, 32"
@ = MultiItem, Role = DashWarningEngine, Center = "590, 175", Size = "39, 32"
@ = MultiItem, Role = DashWarningTemperature, Center = "585, 250", Size = "39, 32"
@ = MultiItem, Role = DashWarningCollision, Center = "525, 200", Size = "25, 27"
@ = MultiItem, Role = DashInteriorLight, Center = "588, 110", Size = "27, 27"
@ = MultiItem, Input = ABS_INACTION, Center = "483, 115", Size = "27, 27", Color = "20, 20, 0"

[CustomEmissive]
Meshes = Grid38, GEO_Decals
Resolution = 1024, 512
DashHighlightColor=0.5,1.42,3
@ = AlphaFromTxDiffuse
@ = CustomEmissive_UseDiffuseLuminocity, From = 0.2, To = 0.5, SkipDiffuseMap = 0
@ = CustomEmissive_Rect, Channel = 0, Start = "354, 301", Size = "665, 216"
@ = DashHighlight


; Alternative way, more flexible, but more wordy as well
; [CustomEmissiveMulti]
; Meshes = GEO_Dials
; Resolution = 1024, 512
; UseEmissive0AsFallback = 1
; Intensity = 5
; @ = DashHighlight
; @ = CustomEmissive_Circle, Channel = 1, Center = "547, 110", Size = 40
; @ = DashWarningABS, Channel = 1
; @ = CustomEmissive_Circle, Channel = 2, Center = "513, 109", Size = 30
; @ = DashWarningSeatbelt, Channel = 2
; @ = CustomEmissive_Area, Channel = 3, Center = "480, 146", Size = "35, 30"
; @ = DashIndicator, Channel = 3, Input = HIGHBEAM
; @ = CustomEmissive_Area, Channel = 4, Center = "490, 180", Size = "39, 32"
; @ = DashIndicator, Channel = 4, Input = HANDBRAKE
; @ = CustomEmissive_Area, Channel = 5, Center = "590, 175", Size = "39, 32"
; @ = DashWarningEngine, Channel = 5
; @ = CustomEmissive_Area, Channel = 6, Center = "585, 250", Size = "39, 32"
; @ = DashWarningTemperature, Channel = 6
; @ = CustomEmissive_Area, Channel = 7, Center = "525, 200", Size = "25, 27"
; @ = DashWarningCollision, Channel = 7
; @ = CustomEmissive_Area, Channel = 8, Center = "588, 110", Size = "27, 27"
; @ = DashInteriorLight, Channel = 8
; @ = CustomEmissive_Area, Channel = 9, Center = "483, 115", Size = "27, 27"
; @ = DashIndicator, Channel = 9, Input = ABS_INACTION, Color = "20, 20, 0"
; ; Debug = 1

[]
Meshes = "{ lod:A & Geo_Rear_Bump_SUB4 }", "{ lod:B & Geo_Rear_Bump_SUB3 }"
@ = ReverseLights, Channel = 0

[LIGHT_LICENSEPLATE]
ACTIVE = 1
MESHES = Plate_LODA, Plate_LODB, Plate_LODC
OFFSET = 0.0, 0.01, -0.02
RANGE = 0.3
SPOT = 160
LAYOUT = TWO_ON_TOP

[INCLUDE: common/materials_carpaint.ini]
[Material_CarPaint_Metallic]
Materials = SKIN_00

[INCLUDE: common/materials_glass.ini]
[INCLUDE: common/materials_interior.ini]
DisableDev = 1

[Material_Glass]
Meshes = Geo_Vtr_Fro, Geo_Vtr_Door_?, Geo_Vtr_Lat_2dx, Geo_Vtr_pos, "{ lod:B & Geo_Exterior_SUB3 }"
FilmIOR = 2.4
ThicknessMult = 1
UseNormalMapWithAlpha = 1

[Material_PhotoelasticGlass]
Meshes = Geo_Vtr_Lights
PhotoelasticityBaseScale = 16
ThicknessMult = 1
FilmIOR = 3.5
UseNormalMapWithAlpha = 1
PhotoelasticityMult = 0.5

[Material_MultiEmissiveGlass]
Meshes = Geo_Vtr_Stop3
UseNormalMapWithAlpha = 1
ThicknessMult = 1
FilmIOR = 2
ProfileFix = 0.1
BrightnessAdjustment = 0.6
IS_TRANSPARENT = 0

[SHADER_REPLACEMENT_...]
MESHES = REARLIGHT_0
IS_TRANSPARENT = 0

[INCLUDE: common/materials_license_plate.ini]
[Material_LicensePlate_Europe]

; ======
; Navigator and parking rear view camera
; ======

; First, need to original mesh. We could reuse it, but it mapped in such a way that it only uses
; a small area of its texture, so we would waste a lot of texture space.
[SHADER_REPLACEMENT_...]
MESHES = Geo_Nav
LAYER = 10
ACTIVE = $" read('csp/version', 0) >= 1709 "

; Now, create a new mesh using this template which would automatically assign digital screen shader
; to it as well. P1…P4 are four clockwise points on corners of the screen (had to tweak them manually
; because there is a bit of a curvature to the whole arrangement, but usually it’s easy to get them
; with Objects Inspector; pro tip: hold Shift to copy click coordinates precisely).
[INCLUDE: common/displays.ini]
[DisplayShape]
MeshName = __nav_display_mesh
ScreenScale = 256
ScreenAspectRatio = 0.75
MatrixType = TN
P1 = 0.09, 0.86, 0.388
P2 = -0.09, 0.86, 0.388
P3 = -0.09, 0.74, 0.336
P4 = 0.09, 0.74, 0.336

; Let’s quickly attach a simple navigator to a newly created mesh.
[INCLUDE: common/navigators.ini]
[NAVIGATOR_0 : Navigator_StyleSygic] ; we need it named exactly NAVIGATOR_0 to reference later
Meshes = __nav_display_mesh
@ = Navigator_Size, Resolution = "512, 384", Size = "476, 316", Offset = "16, 28", Scale = 1.5 ; these values 
  ; are a bit of a mess because of mentioned curvature (had to add padding to screen mesh to make sure there
  ; wouldn’t be any holes), usually Size would match Resolution and Offset would be zero. Also to note, extra 
  ; shapes can actually be more than just rectangles and could follow that curvature precisely, but it works
  ; well enough like this, so why going a more tedious route?
Brightness = 0.5
UPCOMING_TURN_DISTANCE_ROUND_TO = 100
DYNAMIC_OPACITY = 0 ; and we’re disabling whole thing from the start

; Now, let’s prepare rear view camera. Script could access actual mirrors and use them, but we only need it 
; to work with reverse gear, so it would be pretty wasteful to add another mirror which would be hidden most
; of the time. So we’re creating a new rendering camera located somewhere above rear license plate.
[RENDERING_CAMERA_0]
DYNAMIC_TEXTURE_ID = camera_rear ; here, we will create “dynamic::camera_rear” texture
POSITION = 0, 0.685, -2.46
DIRECTION = 0, -0.5, -1
INCLUDE_CAR = 1
REFRESH_RATE = 20  ; doesn’t need to update too often, those in-car cameras are usually pretty nasty
INTERIOR_ONLY = 1  ; stop rendering if camera is not interior one
CLIP_NEAR = 0.005  ; the way it’s positioned, it needs to render things that are very close (bits of car)
FOV = 170          ; huge FOV to get that authentic look
RESOLUTION = 1904, 1264 ; and massive resolution too
ACTIVE_BY_DEFAULT = 0 ; inactive by default, activated by a script
WITH_LIGHTING = 1
; RELATIVE_TO = DOOR_L

; Can’t really render camera like that with that huge FOV, gotta add a bit of preprocessing, namely — 
; fisheye filter to get it look curved and zoomed in in the middle.
[TEXTURE_PREPROCESSING_...]
DYNAMIC_TEXTURE_ID = camera_rear_distorted ; new “dynamic::camera_rear_distorted” texture
TEXTURE_SOURCE = dynamic::camera_rear ; use previously specificed camera texture
RESOLUTION = 476, 316 ; target resolution matches screen one, RESOLUTION for camera is just that multiplied by four
EFFECT = FISHEYE  ; use BASIC if you only need color correction (SATURATION, BRIGHTNESS, etc.)
INTENSITY = 1.5   ; intensity of fisheye effect, adjusted for 170° FOV
EXPOSURE = 1      ; this value activates tonemapping to get image from HDR to LDR space
BRIGHTNESS = 0.7  ; a bit dimmer

; And now it all comes together in a simple scriptable display.
[SCRIPTABLE_DISPLAY_...]
MESHES = __nav_display_mesh
RESOLUTION = 512, 384 ; matches values in navigator
DISPLAY_POS = 16, 28
DISPLAY_SIZE = 476, 316
FORCE_UPDATE_AFTER = NAVIGATOR_0  ; this display is going to be updated each time navigator is drawn
KEEP_BACKGROUND = 1               ; and without clearing step, so we would draw on top of navigator
SCRIPT = '
function update()
  if car.gear ~= -1 then  
    -- If gear is not reverse, activate navigator:
    ac.setDynamicTextureShift("NAVIGATOR_0", 1)  -- this function sets its opacity, it can do more
    ac.setRenderingCameraActive("RENDERING_CAMERA_0", false)  -- pause rendering camera
    return  -- and we’re done here, so let’s stop
  end

  -- Gear is reverse!
  ac.setDynamicTextureShift("NAVIGATOR_0", 0)  -- let’s stop navigator
  ac.setRenderingCameraActive("RENDERING_CAMERA_0", true)  -- activate rendering camera
  display.image{pos = vec2(0, 0), size = vec2(476, 316), image = "dynamic::camera_rear_distorted"}  -- and draw fisheye camera

  -- And we’re done! But for a bit of extra authenticity let’s add lines with trajectory:
  local startL = vec2(60, 250)  -- one thing to note: I haven’t really properly calibrated those lines yet
  local startR = vec2(476 - 60, 250)
  local direction = vec2(35, -25):normalize()
  local lineLen = 160
  local steps = 9
  local steerOffset = -car.steer * 0.12
  local currentPosL = startL
  local currentPosR = startR
  local color = rgbm(1, 0, 0, 1)
  for i = 1, steps do
    local newPosL = startL + direction * (i * (lineLen / steps)) + vec2(steerOffset * (i / steps) ^ 2, 0)
    local newPosR = startR + vec2(-direction.x, direction.y) * (i * (lineLen / steps)) + vec2(steerOffset * (i / steps) ^ 2, 0)
    local drawAcrossColor = color
    if i == 4 then
      color = rgbm(1, 1, 0, 1)
    elseif i == 7 then
      color = rgbm(0, 1, 0, 1)
    else
      drawAcrossColor = i == 9 and color or nil
    end
    ui.drawLine(currentPosL, newPosL, color, 4)
    ui.drawLine(currentPosR, newPosR, color, 4)
    if drawAcrossColor ~= nil then
      ui.drawLine(currentPosL, currentPosR, drawAcrossColor, 4)
    end
    currentPosL = newPosL
    currentPosR = newPosR
    direction:add(vec2(0, 0.02)):normalize()
  end

  -- And a warning:
  display.rect{pos = vec2(40, 276), size = vec2(396, 32), color = rgbm(0, 0, 0, 0.8 )}
  display.text{pos = vec2(40, 286), letter = vec2(12, 20), text = "Check surroundings for safety", font = "aria", width = 396, alignment = 0.5 }
end'

[ANALOG_INDICATOR_...]
INPUT = OIL_PRESSURE
OBJECT_NAME=ARROW_OIL_PRESSURE
UPPER_BOUND = 6
LOWER_BOUND = 0
LUT = (| 0=-100| 4=-10 | 6=20|)


[INCLUDE: common/selflighting.ini]

[SelfLight_Headlights]
POSITION=0, 0.686, 1.83 ; 2nd and third
DIRECTION=0,0,1
RANGE=1.3
SPOT=70
BIND_TO_HEADLIGHTS=1
MIRROR=0.78 ; first value
AFFECTS_TRACK=1